#ifndef _SETTINGS_H_
#define _SETTINGS_H_
    // ----------------------------------------------------
    // >>> Firmware configuration instructions ------------
    // ----------------------------------------------------
    /*
    * To configure firmware for some applications, see:
    * settings.h
    * 
    * define wifi_node options, possible option is:
    * - AS_WIFI_STATION,       the node is a true wifi node, first boot try to configure wifi connection with CaptivePortal @ 192.168.4.1
    * - AS_WIFI_ACCESS_POINT,  the node is a local wifi AP capable, , wifi password is specified into WIFI_AP_PASSWORD
    *                          wifi ssid is specified into WIFI_AP_NAME
    *                          wifi password is specified into WIFI_AP_PASSWORD
    *                          after wifi connection browse @ 192.168.4.1 and show the measure
    * - AS_WIFI_MQTTMESH_NODE, use a pre-stored wifi credential (stored into credential.h file), can use more that 1 wifi connection and use
    *                          a MQTTMesh protocol with bi-directional comunication to other node, auto establish and handling MQTTMesh network
    *
    * AS_WIFI_STATION       0
    * AS_WIFI_ACCESS_POINT  1
    * AS_WIFI_MQTTMESH_NODE 2
    * 
    * example configuration:
    * #define NODE_WIFI_SETTINGS  0 // AS_WIFI_STATION
    *
    * if nothing is selected, defaul configuration is: AS_WIFI_ACCESS_POINT
    * 
    * // Hostname >> UID_HOSTNAME or USER_HOSTNAME
    * UID_HOSTNAME  0 >>> hostname generated by ChipID + suffix
    * USER_HOSTNAME 1 >>> hostname assigned by user
    */
    // ----------------------------------------------------
    // >>> Firmware configuration instructions ------------
    // ----------------------------------------------------

    //----------------------------------------
    // MAIN WIFI SELECTION MODE
    //----------------------------------------
    #define NODE_WIFI_SETTINGS 0

    //----------------------------------------
    // COMMON WIFI SETTINGS
    //----------------------------------------
    #define HOSTNAME_TYPE 0

    /*
    * definition of single wifi network conection possibilities in order to client
    * in this example have 3 wifi connection in the list:
    * 1- wifi network name: "DESKTOP-VCD0H27 7243" wifi network password: 6215wVj4
    * 2- wifi network name: "ssid 1"               wifi network password: NETWORK_PASSWORD
    * 3- wifi network name: "ssid 2"               wifi network password: NETWORK_PASSWORD
    *
    * remember, point 2 and 3 have the same password defined in NETWORK_PASSWORD variable.
    * 
    * MQTT_SERVER =           "192.168.137.1"         // node red default server IP address
    * MQTT_SERVER_TCP_PORT =  1883                    // node red defaule TPC port
    * MQTT_TOPIC_IN =         "STP-WIFI-in/"          // default suffix topic in (complete name is suffix/ChipID) -> std-wifi-in/4758cc
    * MQTT_TOPIC_OUT =        "STP-WIFI-out/"         // default suffix topic out (complete name is suffix/ChipID) -> std-wifi-in/4758cc  
    * MESH_PASSWORD =         "esp8266_sensor_mesh"   // default sensor mesh password (equal  for all mesh network)
    * NETWORK_PASSWORD =      "network password"      // wifi passwords included in NETWORK_LIST
    */

    // ----------------------------------------------------
    //      WEB OTA
    // ----------------------------------------------------
    const char* update_username = "admin";
    const char* update_password = "admin";
    // ----------------------------------------------------
    //      WEB OTA
    // ----------------------------------------------------

    int MQTT_FIRMWARE_ID_H = 0x0007;
    const char* MQTT_FIRMWARE_VER_H = "1.3.2";

    #define NETWORK_LIST { \
                            WIFI_CONN("FRITZ!Box 7590 XO", "07532074360330867860", NULL, 0), \
                            WIFI_CONN("N_A_WIFI", "elettronica2017", NULL, 0), \
                            WIFI_CONN("FRITZ!Box 7590 XO", MystdConfig.NETWORK_PASSWORD.c_str(), NULL, 0), \
                            NULL, \
                        }
    
    #define MQTT_FINGERPRINT    NULL  

    struct _conf{
      int node_wifi_settings = NODE_WIFI_SETTINGS;                    //readonly
      int hostname_type = HOSTNAME_TYPE;                              //readonly
      String ChipID;
      
      //----------------------------------------
      // WIFI AP SETTINGS
      //----------------------------------------
      String HostNameSuffix =  "STD-WIFI-";
      String UserHostName = "esp8266-webupdate";
      String HOSTNAME;                                                //EX WIFI_AP_NAME;
      String WIFI_AP_PASSWORD = "abcd12345";

      //----------------------------------------
      // FTP SERVER SETTINGS
      //----------------------------------------
      String FTP_USERNAME = "esp8266";
      String FTP_PASSWORD = "esp8266";

      //----------------------------------------
      // PROCESS CONTROL SETTINGS
      //----------------------------------------
      int SAMPLE = 10;
      String Tmax = "35.0";                                           //value TAH >> red color
      String Tmin = "10.0";                                           //value value TAL >> blue color
      String UserDescriptions;

      //String _DEFAULT_IP_ADDRESS;                                   //readonly

      //----------------------------------------
      // MQTT ONLY SETTINGS
      /*
        * Mesh and MQTT network definition
        * MESH_PASSWORD =  equal for all devices configured in the same network
        * MQTT_SERVER   =  MQTT broker server address, ex. RaspPI
        * MQTT_PORT     =  MQTT broker TCP port (1883 default port)
      */
      //----------------------------------------
      String NETWORK_PASSWORD = "network password";
      String MESH_PASSWORD = "esp8266_sensor_mesh";
      String MQTT_SERVER = "192.168.137.1";
      int MQTT_SERVER_TCP_PORT = 1883;
      String MQTT_TOPIC_IN = "STP-WIFI-in/";
      String MQTT_TOPIC_OUT = "STP-WIFI-out/";

      // ----------------------------------------------------
      // >>> Mesh secure and certificates settings don't touch
      // ----------------------------------------------------
      bool MESH_SECURE = true;
      bool MQTT_SECURE = false;
      // ----------------------------------------------------
      // <<< Mesh secure and certificates settings don't touch
      // ----------------------------------------------------

      int MQTT_FIRMWARE_ID = MQTT_FIRMWARE_ID_H;                                  //readonly
      const char* MQTT_FIRMWARE_VER = MQTT_FIRMWARE_VER_H;                        //readonly
    };

    String DEFAULT_IP_ADDRESS = WiFi.localIP().toString();

#endif //_SETTINGS_H_